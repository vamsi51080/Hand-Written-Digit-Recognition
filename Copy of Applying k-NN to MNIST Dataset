{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Applying k-NN to MNIST Dataset","provenance":[{"file_id":"1W27iBeuzKH-A2K1M8t7s0SoQORHW28vR","timestamp":1624250315600},{"file_id":"1LaeHe1Ialf7h4BpkVEYObCK2hcQ71ihM","timestamp":1605875754867},{"file_id":"1WQBh9aaCCHNsahIx64PeztJBa3uomIup","timestamp":1605873392230},{"file_id":"1YKqwcPpC_EZLRoR2FiMR62ubv8K1JhqU","timestamp":1605275109392}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"98c17213-ead9-401b-ab44-7ac757463452","executionInfo":{"status":"ok","timestamp":1626521047748,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shar_ Wan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhrYeXZG6u22Ez-nGctV3-mmSU_8MkQ14v8OVbc-w=s64","userId":"01394502747217239314"}}},"source":["import numpy as np"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xhCQhICpnDAc"},"source":["## Downloading MNIST Train and Test Datasets  \n"," \n","* **Proceed to further steps only after executing the cells in this section**.\n","* The variables from these steps are used in some of the sample test cases."]},{"cell_type":"code","metadata":{"id":"af2b3cb8-8391-471c-9271-03ad0901be20","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452882315,"user_tz":-330,"elapsed":16848,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"ebd9c41e-eea5-4561-ec00-557433ff9e4b"},"source":["# Downloading the datasets using wget\n","!wget https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/mnist_train.csv\n","!wget https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/mnist_test.csv"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2021-07-16 16:28:15--  https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/mnist_train.csv\n","Resolving nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com (nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com)... 52.219.62.123\n","Connecting to nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com (nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com)|52.219.62.123|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 109575994 (104M) [text/csv]\n","Saving to: ‘mnist_train.csv.1’\n","\n","mnist_train.csv.1   100%[===================>] 104.50M  11.3MB/s    in 11s     \n","\n","2021-07-16 16:28:28 (9.49 MB/s) - ‘mnist_train.csv.1’ saved [109575994/109575994]\n","\n","--2021-07-16 16:28:28--  https://nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com/otg_prod/media/Tech_4.0/AI_ML/Datasets/mnist_test.csv\n","Resolving nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com (nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com)... 52.219.64.7\n","Connecting to nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com (nkb-backend-otg-media-static.s3.ap-south-1.amazonaws.com)|52.219.64.7|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 18289443 (17M) [text/csv]\n","Saving to: ‘mnist_test.csv.1’\n","\n","mnist_test.csv.1    100%[===================>]  17.44M  5.54MB/s    in 3.1s    \n","\n","2021-07-16 16:28:32 (5.54 MB/s) - ‘mnist_test.csv.1’ saved [18289443/18289443]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FGbpsb811xRu"},"source":["**NOTE:** Executing the below cell might take some time (1-2 min) as the original MNIST dataset is large."]},{"cell_type":"code","metadata":{"id":"47d30efd-945e-4302-a9c2-670178356231","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452932504,"user_tz":-330,"elapsed":50232,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"a4903f48-17d4-4548-c234-a4ae05041ffa"},"source":["train_file_name = \"mnist_train.csv\"\n","train_data = np.genfromtxt(train_file_name, delimiter=',', dtype=np.uint16)\n","print(f\"Shape of the train_data in {train_file_name} is: {train_data.shape} \\n\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Shape of the train_data in mnist_train.csv is: (60000, 785) \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4zuLos6hb2Iw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452932506,"user_tz":-330,"elapsed":48,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"18a4feee-c4cb-48d0-ef35-a190d336ab92"},"source":["\n","print(train_data)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[5 0 0 ... 0 0 0]\n"," [0 0 0 ... 0 0 0]\n"," [4 0 0 ... 0 0 0]\n"," ...\n"," [5 0 0 ... 0 0 0]\n"," [6 0 0 ... 0 0 0]\n"," [8 0 0 ... 0 0 0]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9dcc216c-2afc-49fd-aad0-a6f78e995a6b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452932507,"user_tz":-330,"elapsed":42,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"09858201-7d6f-49d1-86e4-7973165fb3f5"},"source":["MNIST_train_Y = train_data[:, 0].reshape(-1, 1)\n","MNIST_train_X = train_data[:, 1:]\n","\n","print(f\"Shape of X: {MNIST_train_X.shape} \\n\")\n","print(f\"Shape of Y: {MNIST_train_Y.shape} \\n\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Shape of X: (60000, 784) \n","\n","Shape of Y: (60000, 1) \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tvtdIABkKq_f"},"source":["**NOTE:** We've used **`np.uint16`** to reduce the space taken by the input arrays.\n"]},{"cell_type":"code","metadata":{"id":"S3m-4CRpiLW_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452938594,"user_tz":-330,"elapsed":6122,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"46c0e064-f05e-4845-cd4c-1cd74aead37b"},"source":["test_file_name = \"mnist_test.csv\"\n","test_data = np.genfromtxt(test_file_name, delimiter=',', dtype=np.uint16)\n","print(f\"Shape of the test_data in {test_file_name} is: {test_data.shape} \\n\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Shape of the test_data in mnist_test.csv is: (10000, 785) \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LlGoXHaYiLD9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452938596,"user_tz":-330,"elapsed":64,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"56791b05-1ec8-4e84-88ae-a6046eb6a1ba"},"source":["MNIST_test_Y = test_data[:, 0].reshape(-1, 1)\n","MNIST_test_X = test_data[:, 1:]\n","\n","print(f\"Shape of X: {MNIST_test_Y.shape} \\n\")\n","print(f\"Shape of Y: {MNIST_test_X.shape} \\n\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Shape of X: (10000, 1) \n","\n","Shape of Y: (10000, 784) \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EjmTy1hvlapF"},"source":["### Sizes of Train and Test datasets"]},{"cell_type":"code","metadata":{"id":"DJ-WI3nVkKjU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452938598,"user_tz":-330,"elapsed":60,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"1d0c9ed4-8d4e-4627-ffe2-b5679b6692bb"},"source":["print(f\"Size of train_X: {MNIST_train_X.nbytes}\")\n","print(f\"Size of train_Y: {MNIST_train_Y.nbytes}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Size of train_X: 94080000\n","Size of train_Y: 120000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"G-boAKvZkKRJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452938599,"user_tz":-330,"elapsed":54,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"3f4c3841-6a4c-4646-9299-11848f52bd10"},"source":["print(f\"Size of test_X: {MNIST_test_X.nbytes}\")\n","print(f\"Size of test_Y: {MNIST_test_Y.nbytes}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Size of test_X: 15680000\n","Size of test_Y: 20000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qXk8eQ7Kloow"},"source":["## k-NN Algorithm"]},{"cell_type":"markdown","metadata":{"id":"n8WN-hVHmsdR"},"source":["### Split Train and Validation Data"]},{"cell_type":"code","metadata":{"id":"AabMkisql8HQ"},"source":["import math\n","def shuffle(X, Y):\n","  np.random.seed(2) \n","  indices = np.random.permutation(X.shape[0])\n","  shuffled_X = X[indices]\n","  shuffled_Y = Y[indices]\n","  return shuffled_X, shuffled_Y"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VjHZreJiKZST"},"source":["Using a fixed validation set size instead of percentage\n","\n"]},{"cell_type":"code","metadata":{"id":"2QLn5QbBmRXf"},"source":["  inputs, labels = shuffle(MNIST_train_X, MNIST_train_Y)\n","  train_length = 59000\n","  \n","  train_inputs = inputs[:train_length]\n","  train_labels = labels[:train_length]\n","  validation_inputs = inputs[train_length:]\n","  validation_labels = labels[train_length:]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T6xT-dgxnhgM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452938602,"user_tz":-330,"elapsed":48,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"40ac8263-781c-4e66-8e1d-038a3ed55fb7"},"source":["print(f\"Size of train_inputs: {train_inputs.nbytes}\")\n","print(f\"Size of validation_inputs: {validation_inputs.nbytes}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Size of train_inputs: 92512000\n","Size of validation_inputs: 1568000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"csl3LgMUXrPo"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SAXNBNqQmyyH"},"source":["### Compute distances matrix\n","We're computing the distances between all the validation inputs and training inputs beforehand, so that we need not compute them in every iteration of **`majority_based_knn`** function."]},{"cell_type":"markdown","metadata":{"id":"J-voDb2SLBzz"},"source":["**NOTE:** We've used **`np.float32`** to reduce the space taken by the input arrays."]},{"cell_type":"code","metadata":{"id":"o69sJZSem5iQ"},"source":["train_count = train_inputs.shape[0]\n","num_of_features = train_inputs.shape[1]\n","validation_count = validation_inputs.shape[0]\n","\n","distances_matrix = np.zeros((validation_count, train_count), dtype=np.float32)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I4XJpbnmntCd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626452939210,"user_tz":-330,"elapsed":15,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"58470926-e1f4-40b3-b97b-56b18ac378fe"},"source":["print(f\"Size of distances_matrix: {distances_matrix.nbytes}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Size of distances_matrix: 236000000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oiQ_CftPyRgN"},"source":["def Ln_norm_distances(train_X, test_x):\n","    abs_diff = np.abs(train_X - test_x)  \n","    summation = np.sum(np.power(abs_diff, n), axis=1)\n","    ln_distances = np.power(summation, 1/n)\n","    return ln_distances"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wyLyyXjqRFh3"},"source":["We are computing L2 norm distances"]},{"cell_type":"code","metadata":{"id":"gTc5jF-cy385"},"source":["n = 2\n","import time\n","for idx, each in enumerate(validation_inputs):\n","  ln_distances = Ln_norm_distances(train_inputs, each)\n","  distances_matrix[idx] = ln_distances"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EHTzNKoW0wRG"},"source":["### Majority Based k-NN\n","\n","We've updated the **`majority_based_knn`** function to use the `distances_matrix` which is computed beforehand."]},{"cell_type":"code","metadata":{"id":"50b2e6e6-800b-4242-8852-057d0e055969"},"source":["def majority_based_knn(distances_matrix, train_Y, k):\n","  unique_class_labels = np.unique(train_Y)\n","  num_unique_classes = unique_class_labels.shape[0]\n","\n","  train_length = distances_matrix.shape[1]\n","  test_length = distances_matrix.shape[0]\n","\n","  label_wise_counts = np.zeros((test_length, num_unique_classes))\n","  label_wise_weights = np.zeros((test_length, num_unique_classes))\n","\n","  sorted_indices = np.argsort(distances_matrix, axis=1)\n","\n","  for test_idx in range(test_length):\n","    # Getting k-Nearest Neighbors from distances matrix\n","    test_distances = distances_matrix[test_idx]\n","    sorted_test_indices = sorted_indices[test_idx]\n","    kth_dist_repeat_count = 0\n","    if train_length > k:\n","      kth_neighbour_distance = test_distances[sorted_test_indices[k-1]] \n","      kth_dist_repeat_count = np.count_nonzero(test_distances[k:] == kth_neighbour_distance)\n","    indices_k = sorted_test_indices[:(k + kth_dist_repeat_count)]\n","    distances_k = test_distances[indices_k]\n","    labels_k = train_Y[indices_k]\n","\n","    for label_idx, each_label in enumerate(unique_class_labels):\n","      label_weight = np.sum(np.where(labels_k == each_label, 1/distances_k, 0.0))\n","      label_wise_weights[test_idx][label_idx] = label_weight\n","      label_count = np.sum(np.where(labels_k == each_label, 1.0, 0.0))\n","      label_wise_counts[test_idx][label_idx] = label_count\n","  \n","  output_labels = np.empty(test_length, dtype=int)\n","\n","  sorted_counts_indices = np.argsort(label_wise_counts, axis=1)\n","  for test_idx, test_indices in enumerate(sorted_counts_indices):\n","    highest_count = label_wise_counts[test_idx][test_indices[num_unique_classes-1]]\n","    highest_label_repeat = np.count_nonzero(label_wise_counts[test_idx] == highest_count)\n","    \n","    no_voting_tie = (highest_label_repeat==1)\n","    if no_voting_tie:\n","      output_labels[test_idx] = unique_class_labels[test_indices[num_unique_classes-1]]\n","    else:\n","      tied_class_indices = test_indices[num_unique_classes-highest_label_repeat:]\n","      tied_class_weights = label_wise_weights[test_idx][tied_class_indices]\n","      max_weight_idx = np.argmax(tied_class_weights)\n","      max_idx = tied_class_indices[max_weight_idx]\n","      output_labels[test_idx] = unique_class_labels[max_idx]\n","\n","  return output_labels"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b65d04ea-00b8-472a-a17c-ccf7e5d7c5bd"},"source":["def calculate_accuracy(predicted_labels, actual_labels):\n","    correctly_predicted_count = np.count_nonzero(predicted_labels == actual_labels)\n","    accuracy = float(correctly_predicted_count)/predicted_labels.size\n","    return accuracy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1_3pj7pzN4pi"},"source":["**NOTE:** **`distances_matrix`** contains 'L2' distances between training and validation data"]},{"cell_type":"code","metadata":{"id":"9uhZdZ9q01Xc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626453136671,"user_tz":-330,"elapsed":5668,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"b112cbd7-a958-4f01-c860-2435c1126f52"},"source":["k = 20\n","output_labels = majority_based_knn(distances_matrix, train_labels, k)\n","accuracy = calculate_accuracy(output_labels.flatten(), validation_labels.flatten())\n","print(f\"accuracy for (k, n) {k , n} is : {accuracy}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy for (k, n) (20, 2) is : 0.966\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ani-PlgyYjeP"},"source":["import matplotlib.pyplot as plt\n","\n","def visualise(image_1D):\n","    image_2D = np.reshape(image_1D,(28,28))\n","    plt.imshow(image_2D, cmap=plt.get_cmap('gray'))\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IBarEwO1Yniq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626453136675,"user_tz":-330,"elapsed":73,"user":{"displayName":"vamsi krishna sripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiSf80b76zzDhPtC9tlH48GA8Ux54xZ-3QhdkUN_A=s64","userId":"11487050945541726368"}},"outputId":"40054faf-57e2-42b1-d930-a5f1ca982061"},"source":["visualise(validation_inputs[114])\n","print(\"The predicted value is \",output_labels[114])"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["The predicted value is  3\n"],"name":"stdout"}]}]}